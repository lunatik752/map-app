{"version":3,"sources":["common/Input/Input.module.css","common/Button/Button.module.css","components/MapPage/MapPage.tsx","common/Input/Input.tsx","common/Button/Button.tsx","api/geocoder-api.ts","api/search-org-api.ts","state/geocoder-reducer.ts","components/SearchModule/SearchModule.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["module","exports","MapPage","React","memo","props","coordinate","useSelector","state","cityCoordinates","schoolsItems","schools","console","log","style","height","width","center","zoom","map","school","geometry","coordinates","properties","iconCaption","name","Input","onEnter","error","restProps","onClickEnter","useCallback","event","key","className","styles","input","onKeyPress","Button","button","instance","axios","create","baseURL","getCoordinate","requestText","a","get","data","response","getSchoolsApi","initialState","type","SearchModule","useState","country","setCountry","city","setCity","dispatch","useDispatch","setCountryCallback","e","currentTarget","value","setCityCallback","onSearch","result1","result2","GeoObjectCollection","featureMember","GeoObject","Point","pos","split","reverse","el","features","getCityCoordinates","placeholder","onChange","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","arr","RegExp","join","filter","s","toLowerCase","match","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d82578e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__KFXoi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1z7jd\"};","import React, {useEffect} from 'react';\nimport {Map, Placemark, YMaps} from \"react-yandex-maps\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from '../../state/store';\n\ntype PropsType = {}\n\nexport const MapPage = React.memo((props: PropsType) => {\n\n    const coordinate = useSelector<AppRootStateType, Array<number>>(state => state.cityCoordinates.cityCoordinates)\n    const schoolsItems = useSelector<AppRootStateType, Array<any>>(state => state.cityCoordinates.schools)\ndebugger\n\n    console.log(schoolsItems)\n\n    return (\n        <div>\n            <YMaps>\n                <div style={{height: '100vh', width: '100%'}}>\n                    <Map state={{center: coordinate, zoom: 12}} width={'100%'} height={'100vh'}>\n                        {schoolsItems.map((school) => <Placemark  geometry={school.geometry.coordinates} properties={{\n                            iconCaption: school.properties.name,\n                        }}/>)}\n                    </Map>\n                </div>\n            </YMaps>\n        </div>\n    )\n})\n\n// key={school.properties.CompanyMetaData.id}\n\n\n","import React, {DetailedHTMLProps, InputHTMLAttributes, useCallback} from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n    & { onEnter?: () => void, error?: string };\r\n\r\nconst Input = React.memo((props: InputPropsType) => {\r\n    const {onEnter, error, ...restProps} = props;\r\n\r\n    const onClickEnter = useCallback((event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (onEnter && event.key === \"Enter\") {\r\n            onEnter()\r\n        }\r\n    }, [onEnter])\r\n\r\n    return (\r\n        <>\r\n            <input className={styles.input} {...restProps}  onKeyPress={onClickEnter}/>\r\n            {error ? <span>{error}</span> : ''}\r\n        </>\r\n    );\r\n})\r\n\r\nexport default Input;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styles from './Button.module.css';\r\n\r\ntype   ButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\nconst Button = React.memo((props: ButtonPropsType) => {\r\n    const {...restProps} = props;\r\n    return (\r\n        <button className={styles.button} {...restProps}>{props.name}</button>\r\n    );\r\n})\r\n\r\nexport default Button;\r\n\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://geocode-maps.yandex.ru/1.x/',\r\n})\r\nconst apikey = \"cf257613-388c-495a-989f-98c40a840056\"\r\n\r\nexport const getCoordinate = async (requestText: string) => {\r\n    const data = await instance.get(`?format=json&geocode=${requestText}&apikey=${apikey}`)\r\n    return data.data.response\r\n}\r\n","import axios from \"axios\";\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://search-maps.yandex.ru/v1/',\r\n})\r\nconst apikey = \"2fabdc58-1495-4a84-afef-ac1bc6f1f91c\"\r\n\r\nexport const getSchoolsApi = async (requestText: string) => {\r\n    const response = await instance.get(`?text=${requestText} обучение программированию, it школа&results=100&lang=ru_RU&apikey=${apikey}`)\r\n    return response.data\r\n}\r\n","import {getCoordinate} from \"../api/geocoder-api\";\r\nimport {getSchoolsApi} from \"../api/search-org-api\";\r\n\r\ntype GeometryType = {\r\n    coordinates: Array<number>\r\n    type: string\r\n}\r\n\r\ntype SchoolType = {\r\n    geometry: GeometryType\r\n    properties: any\r\n    type: string\r\n}\r\n\r\ntype InitialStateType = {\r\n    cityCoordinates: Array<number>,\r\n    schools: Array<SchoolType>\r\n}\r\n\r\n\r\nconst initialState = {\r\n    cityCoordinates: [53.90, 27.56],\r\n    schools: [{\r\n        geometry: {\r\n            coordinates: [1, 2],\r\n                type: ''\r\n        },\r\n        properties: {},\r\n        type: ''\r\n    }]\r\n}\r\n\r\nexport const geocodeReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'GET_CITY_COORDINATES':\r\n            const arr = ['средняя', 'гимназия']\r\n            const value = new  RegExp(arr.join('|'), 'i')\r\n            return {...state,\r\n                cityCoordinates: action.value,\r\n                schools: action.schools.filter(s => !s.properties.name.toLowerCase().match(value)).map((s)  => ({...s, coordinates: s.geometry.coordinates.reverse()}))\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// action types\r\ntype ActionType = ReturnType<typeof addCityCoordinates>\r\n\r\n// action creators\r\nexport const addCityCoordinates = (value: Array<number>, schools: Array<any>) => ({type: 'GET_CITY_COORDINATES', value, schools} as const)\r\n\r\n// Thunk\r\n\r\nexport const getCityCoordinates = (country: string, city: string) => async (dispatch: any) => {\r\n    debugger\r\n    const result1 = await getCoordinate(country + ' ' + city)\r\n    const result2 = await getSchoolsApi(country + ' ' + city)\r\n\r\n    dispatch(addCityCoordinates(result1.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ').reverse().map((el: string) => +el), result2.features))\r\n}\r\n\r\n","import React, {ChangeEvent, useCallback, useState} from 'react';\nimport Input from \"../../common/Input/Input\";\nimport Button from \"../../common/Button/Button\";\nimport {getCityCoordinates} from '../../state/geocoder-reducer';\nimport {useDispatch} from 'react-redux';\n\n\nexport const SearchModule = React.memo(() => {\n    const [country, setCountry] = useState<string>('');\n    const [city, setCity] = useState<string>('');\n    const dispatch = useDispatch()\n\n    const setCountryCallback = useCallback((e: ChangeEvent<HTMLInputElement>) => setCountry(e.currentTarget.value),\n        [setCountry]);\n\n    const setCityCallback = useCallback((e: ChangeEvent<HTMLInputElement>) => setCity(e.currentTarget.value),\n        [setCity]);\n\nconst  onSearch = useCallback(() => {\n    console.log(country + ' ' + city)\n    dispatch(getCityCoordinates(country, city))\n\n    setCountry('')\n    setCity('')\n}, [city, country, dispatch])\n\n    return (\n        <div>\n            <Input placeholder={'Страна'} onChange={setCountryCallback} value={country}/>\n            <Input placeholder={'Город'} onChange={setCityCallback} value={city}/>\n            <Button name='Найти' onClick={onSearch}/>\n        </div>\n    )\n})\n\n\n\n","import React from 'react';\nimport './App.css';\nimport {MapPage} from './components/MapPage/MapPage';\nimport {SearchModule} from \"./components/SearchModule/SearchModule\";\n\n\nconst App = () => {\n\n    return (\n        <div >\n            <SearchModule/>\n            <MapPage/>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { geocodeReducer } from \"./geocoder-reducer\";\r\n// import {searchSchoolReducer} from \"./search-schools-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    cityCoordinates: geocodeReducer,\r\n    // schoolItems: searchSchoolReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport { store } from './state/store';\n\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}